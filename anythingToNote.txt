

//以下來自index.html，入面的async function loadEventsNew(isAdult){}可以把event按category來排序。
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home Page</title>
    <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ"
    crossorigin="anonymous"
  />
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
    crossorigin="anonymous"
  ></script>
    <style>
      @media only screen and (min-width: 380px) {
        /* For mobile phones: */
        [class*="col-"] {
          width: 100%;
        }
        .category-title{
          margin-left: 2rem;;
          margin-top: 2rem;
        }
        .carouselimg {
          height: 100%;
          object-fit: cover;
        }
        #carouselExampleIndicators{
          margin-top: 4.5rem;
          width: 100vw;
          object-fit: cover;
          height: 30vh;
        }
        .carousel-item {
          width: 100vw;
          height: 30vh !important;
        }
        .slideBtn{
          width: 1rem !important;
          height: 1rem !important;
        }
      }
    </style>
    <link rel="stylesheet" href="/css/form.css" />
    <link rel="stylesheet" href="/css/nav.css" />
    <link rel="stylesheet" href="/css/eventlist.css" />
  </head>
  <body data-role="guest">

    <nav
      class="navbar mb-4"
      style="background-color: rgb(111, 203, 234)"
    >
      <div class="container-fluid">
        <a class="navbar-brand" href="/index.html">
          <img id="logo" src="img/Logo.png" width="60" height="47" />Pecky
        </a>
        <div class="rowEnd">
          <a
            href="/sign-up.html"
            class="nav-link d-flex px-2 text-dark"
            id="signUp"
            >Sign Up</a
          >/<a
            href="/Login.html"
            class="nav-link d-flex px-2 text-dark"
            id="logIn"
            >LogIn</a
          >          
        </div>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarCollapse"
          aria-controls="navbarCollapse"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
          <ul class="navbar-nav me-auto mb-2 mb-md-0">
            <div class="message">
              Welcome back -<span class="username"></span>
            </div>
            <li class="nav-item">
              <a href="/index.html" class="nav-link px-2 text-dark">Home</a>
            </li>
            <li class="nav-item">
              <a href="/create-event.html" class="nav-link px-2 text-dark"
                >Create event</a
              >
            </li>
            <li class="nav-item">
              <a href="/manage-event.html" class="nav-link px-2 text-dark"
                >Manage event</a
              >
            </li>
          </ul>
          <form id="logOut" method="POST" action="/logout" class="nav-item">
            <button
              id="logoutBtn"
              value="Logout"
              class="btn nav-link text-dark me-2"
            >
              Log out
            </button>
          </form>
        </div>
      </div>
    </nav>
  
  <div id="carouselExampleIndicators" class="carousel slide">
    <div class="carousel-indicators">
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active slideBtn" aria-current="true" aria-label="Slide 1"></button>
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" class="slideBtn" aria-label="Slide 2"></button>
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" class="slideBtn" aria-label="Slide 3"></button>
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="3" class="slideBtn" aria-label="Slide 4"></button>
      <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="4" class="slideBtn" aria-label="Slide 5"></button>
    </div>
    <div class="carousel-inner">
      <div class="carousel-item active"><a href="" id="carousel1Link">
        <img class="d-block w-100 carouselimg" id="carousel1"></a>
      </div>
      <div class="carousel-item"><a href="" id="carousel2Link">
        <img class="d-block w-100 carouselimg" id="carousel2"></a>
      </div>
      <div class="carousel-item"><a href="" id="carousel3Link">
        <img class="d-block w-100 carouselimg" id="carousel3"></a>
      </div>
      <div class="carousel-item"><a href="" id="carousel4Link">
        <img class="d-block w-100 carouselimg" id="carousel4"></a>
      </div>
      <div class="carousel-item"><a href="" id="carousel5Link">
        <img class="d-block w-100 carouselimg" id="carousel5"></a>
      </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Next</span>
    </button>
  </div>

    </section>
</main>


          <!-- <div class="right">
            <div>
              <a href="/index.html"><button id="logOut-btu">Logout</button></a>
              <div class="title">Admin Panel</div>
              <div>You have login as <span class="username"></span></div>
            </div>
          </div> -->
 
        <!-- 加入search功能 -->
        <!-- <a href="/index.html"><i class="bi bi-x-lg"></i></a>
        <h1>Search Event</h1>
        <form id="search-form">
          <input type="text" id="search-input" placeholder="Search items..." />
          <button type="submit">Search</button>
        </form>
        <ul id="results-list"></ul> -->

    <template>
      <a href="/view-event.html?id=1" id="link">
        <div class="eventBox">
          <img class="image" id="eventPicture" />
          <div class="eventTitle" id="title">test1</div>
        </div>
      </a>      
    </template>

    <div id="event-box">

    </div>

    <!-- <h2 class="category-title">Anime</h2>
    <div class="event-list anime"></div>
    <h2 class="category-title">Board Game</h2>
    <div class="event-list boardGame"></div>
    <h2 class="category-title">Booking</h2>
    <div class="event-list booking"></div>
    <h2 class="category-title">Celebrities</h2>
    <div class="event-list celebrities"></div>
    <h2 class="category-title">Giveaway</h2>
    <div class="event-list giveaway"></div>
    <h2 class="category-title">Match</h2>
    <div class="event-list match"></div>
    <h2 class="category-title">Meeting</h2>
    <div class="event-list meeting"></div>
    <h2 class="category-title">Photography</h2>
    <div class="event-list photography"></div> -->

    <div class="footer">© 2023 Chocolate IceCream Limited</div>
    <script>
      
      //insert all event previews
      let template = document.querySelector("template");

      let animeGameEventList = document.querySelector(".anime");
      let boardGameEventList = document.querySelector(".boardGame");
      let bookingEventList = document.querySelector(".booking");
      let celebritiesEventList = document.querySelector(".celebrities");
      let giveawayEventList = document.querySelector(".giveaway");
      let matchEventList = document.querySelector(".match");
      let meetingEventList = document.querySelector(".meeting");
      let photographyEventList = document.querySelector(".photography");

      let eventTemplate = template.content.querySelector("#link");

      function showEvent(event) {
        let node = eventTemplate.cloneNode(true);
        node.querySelector(".eventTitle").textContent = event.title;

        let img = node.querySelector(".image");

        if(event.is_age18 == false) {
          if (event.eventpicture) {
            img.src = "/uploads/event-images/" + event.eventpicture;
          } 
          else {
            img.src = "/uploads/event-images/default.jpg";
          }
        } 
        else {
          img.src = "/uploads/event-images/r18.jpg";
        }

        node.href = "/view-event.html?id=" + event.id;

        if(event.category == "Anime"){
          animeGameEventList.appendChild(node);
        }
        if(event.category == "Board Game"){
          boardGameEventList.appendChild(node);
        }
        if(event.category == "Booking"){
          bookingEventList.appendChild(node);
        }
        if(event.category == "Celebrities"){
          celebritiesEventList.appendChild(node);
        }
        if(event.category == "Giveaway"){
          giveawayEventList.appendChild(node);
        }
        if(event.category == "Match"){
          matchEventList.appendChild(node);
        }
        if(event.category == "Meeting"){
          meetingEventList.appendChild(node);
        }
        if(event.category == "Photography"){
          photographyEventList.appendChild(node);
        }
      }

      async function loadEvents() {
        let res = await fetch("/allEvent");

        
        let json = await res.json();
        if (json.error) {
          showError("Failed to load event list", json.error);
          return;
        }

        for (let event of json.events) {
          showEvent(event);

          let c1 = document.querySelector("#carousel1")
          let c1link = document.querySelector("#carousel1Link")
          let c2 = document.querySelector("#carousel2")
          let c2link = document.querySelector("#carousel2Link")
          let c3 = document.querySelector("#carousel3")
          let c3link = document.querySelector("#carousel3Link")
          let c4 = document.querySelector("#carousel4")
          let c4link = document.querySelector("#carousel4Link")
          let c5 = document.querySelector("#carousel5")
          let c5link = document.querySelector("#carousel5Link")
          if (event.id == 2) {
          c1.src = "/uploads/event-images/" + event.eventpicture;
          c1link.href = "/view-event.html?id=" + event.id;
          }
          if (event.id == 8) {
          c2.src = "/uploads/event-images/" + event.eventpicture;
          c2link.href = "/view-event.html?id=" + event.id;
          }
          if (event.id == 16) {
          c3.src = "/uploads/event-images/" + event.eventpicture;
          c3link.href = "/view-event.html?id=" + event.id;
          } 
          if (event.id == 10) {
          c4.src = "/uploads/event-images/" + event.eventpicture;
          c4link.href = "/view-event.html?id=" + event.id;
          } 
          if (event.id == 6) {
          c5.src = "/uploads/event-images/" + event.eventpicture;
          c5link.href = "/view-event.html?id=" + event.id;
          } 

        }
      }
      // loadEvents();

      const eventBox = document.querySelector("#event-box")

      async function loadEventsNew(isAdult){
        console.log(isAdult);
        let res = await fetch(`/allEventGet?isAdult=${isAdult}`);
        let json = await res.json();

        console.log(json);
        
        if (json.error) {
          showError("Failed to load event list", json.error);
          return;
        }

        const advArray = [2, 8, 16, 10, 6];
        for(let i = 1; i < 6; i ++){
          let c = document.querySelector(`#carousel${i}`)
          let clink = document.querySelector(`#carousel${i}Link`)

          let eventItem = json.events.find( event => event.id === advArray[i-1]);
          c.src = "/uploads/event-images/" + eventItem.eventpicture;
          clink.href = "/view-event.html?id=" + eventItem.id;
        }


        // json.events.forEach( event => showEvent(event));

        let categoryList = new Set();
        json.events.forEach( event => categoryList.add(event.category));

        console.log(categoryList);

        for(let category of Array.from(categoryList).sort()){

          let categoryItems = json.events
            .filter( v => v.category == category)
            .sort( (a,b) => new Date(a.start_date).getTime() - new Date(b.start_date).getTime())
            .map( v => {

              console.log(new Date(v.start_date));

              let imgPath = ""
              if(v.is_age18 == false) {
                if (v.eventpicture) {
                  imgPath = "/uploads/event-images/" + v.eventpicture;
                } 
                else {
                  imgPath = "/uploads/event-images/default.jpg";
                }
              } 
              else {
                imgPath = "/uploads/event-images/r18.jpg";
              }

              return `
              <a href="/view-event.html?id=${v.id}" id="link">
                <div class="eventBox">
                  <img class="image" id="eventPicture" src="${imgPath}" />
                  <div class="eventTitle" id="${v.title}">${v.title}</div>
                </div>
              </a>    
            `
            }) 
            ;

          let catHtml = `
          <h2 class="category-title">${category}</h2>
          <div class="event-list ${category}">
            ${categoryItems.join("")}
          </div>
          `

          eventBox.innerHTML += catHtml;

         
        }

      

       
        
      }

      async function loadPureEvents() {
        let res = await fetch("/allEventPure");
        let json = await res.json();

        if (json.error) {
          showError("Failed to load event list", json.error);
          return;
        }

        for (let event of json.events) {
          showEvent(event);

          let c1 = document.querySelector("#carousel1")
          let c1link = document.querySelector("#carousel1Link")
          let c2 = document.querySelector("#carousel2")
          let c2link = document.querySelector("#carousel2Link")
          let c3 = document.querySelector("#carousel3")
          let c3link = document.querySelector("#carousel3Link")
          let c4 = document.querySelector("#carousel4")
          let c4link = document.querySelector("#carousel4Link")
          let c5 = document.querySelector("#carousel5")
          let c5link = document.querySelector("#carousel5Link")
          
          if (event.id == 2) {
          c1.src = "/uploads/event-images/" + event.eventpicture;
          c1link.href = "/view-event.html?id=" + event.id;
          }
          if (event.id == 8) {
          c2.src = "/uploads/event-images/" + event.eventpicture;
          c2link.href = "/view-event.html?id=" + event.id;
          }
          if (event.id == 16) {
          c3.src = "/uploads/event-images/" + event.eventpicture;
          c3link.href = "/view-event.html?id=" + event.id;
          } 
          if (event.id == 10) {
          c4.src = "/uploads/event-images/" + event.eventpicture;
          c4link.href = "/view-event.html?id=" + event.id;
          } 
          if (event.id == 6) {
          c5.src = "/uploads/event-images/" + event.eventpicture;
          c5link.href = "/view-event.html?id=" + event.id;
          } 

        }
      }

      async function non18users() {
        let res = await fetch("/non18users");
        let json = await res.json();

        loadEventsNew(json.is_age18 || "false");

        // if(json.is_age18 == "true"){
        //   loadEvents() // 18
        // } else {
        //   loadPureEvents() // not in 18
        // }

      }

      non18users()

      let logoutForm = document.querySelector("form#logOut");
      //連同applyRole令div顯示用戶名稱
      let currentUsername = document.querySelector(".username");

      logoutForm.addEventListener("submit", async (event) => {
        event.preventDefault();
        let form = logoutForm;
        let res = await fetch(form.action, {
          method: form.method,
        });
        let json = await res.json();
        if (json.role == "guest") {
          applyRole();
        }
        window.location = `/index.html`;
      });

      function applyRole(user) {
        document.body.dataset.role = user ? "user" : "guest";
        if (user) {
          currentUsername.textContent = user.name;
        }
      }

      async function loadRole() {
        let res = await fetch("/role");
        let json = await res.json();
        applyRole(json.user);
      }

      loadRole();

      async function loadEvents() {
        let res = await fetch("/allEvent");

        
        let json = await res.json();
        if (json.error) {
          showError("Failed to load event list", json.error);
          return;
        }

        for (let event of json.events) {
          showEvent(event);

          let c1 = document.querySelector("#carousel1")
          let c1link = document.querySelector("#carousel1Link")
          let c2 = document.querySelector("#carousel2")
          let c2link = document.querySelector("#carousel2Link")
          let c3 = document.querySelector("#carousel3")
          let c3link = document.querySelector("#carousel3Link")
          let c4 = document.querySelector("#carousel4")
          let c4link = document.querySelector("#carousel4Link")
          let c5 = document.querySelector("#carousel5")
          let c5link = document.querySelector("#carousel5Link")
          if (event.id == 2) {
          c1.src = "/uploads/event-images/" + event.eventpicture;
          c1link.href = "/view-event.html?id=" + event.id;
          }
          if (event.id == 8) {
          c2.src = "/uploads/event-images/" + event.eventpicture;
          c2link.href = "/view-event.html?id=" + event.id;
          }
          if (event.id == 16) {
          c3.src = "/uploads/event-images/" + event.eventpicture;
          c3link.href = "/view-event.html?id=" + event.id;
          } 
          if (event.id == 10) {
          c4.src = "/uploads/event-images/" + event.eventpicture;
          c4link.href = "/view-event.html?id=" + event.id;
          } 
          if (event.id == 6) {
          c5.src = "/uploads/event-images/" + event.eventpicture;
          c5link.href = "/view-event.html?id=" + event.id;
          } 

        }
      }
    </script>
  </body>
</html>













我的guards.ts文件如下：
import { NextFunction, Request, Response } from 'express'
import { HttpError } from './express'
import './session'

export function hasLogin(req: Request, res: Response, next: NextFunction) {
  if (req.session.user) {
    next()
    return
  }
  res.status(401)
  res.json({ error: 'This API is only for authenticated users' })
}

export function getSessionUser(req: Request) {
  let user = req.session.user
  if (user) return user
  throw new HttpError(401, 'This API is only for authenticated users')
}

我的event.routes.ts文件如下：
import express from "express";
import { Router } from "express";
import { Request, Response } from "express";
import formidable from "formidable";
import { mkdirSync } from "fs";
import { join } from "path";
import { client } from "../db";
import { checkString, checkBoolean } from "../express";

import { getSessionUser } from "../guards";

let uploadDir = join("uploads", "event-images");
mkdirSync(uploadDir, { recursive: true });
import "../session";

import { extractTag } from "../tagRelatedFunction";

export const eventRoutes = Router();

export type Event = {
  id: number;
  host_id: number;
  eventPicture?: string;
  title: string;
  category: string;
  Date: Date;
  Time: TimeRanges;
  Details: String;
  Hashtag: String;
  Cost: Number;
  Location: String;
  Participants: Number;
  FAQ: String;
  Is_age18: Boolean;
  Is_private: Boolean;
};

const form = formidable({
  uploadDir,
  keepExtensions: true,
  maxFiles: 1,
  maxFileSize: 1024 ** 2 * 200,
  filter: (part) => part.mimetype?.startsWith("image/") || false,
});

let insert_post = async (content: string) => {
  const result = await client.query(
    /* sql */ `
    insert into post (content) values ($1) returning id
  `,
    [content]
  );
  console.log(result.rows[0].id);
  return result.rows[0].id;
};
console.log(insert_post);

let select_tag_id = async (hashtag: string) => {
  const result = await client.query(
    /* sql */ `
SELECT
  id
FROM tag
WHERE hashtag = $1;
  `,
    [hashtag]
  );
  return result.rows[0]?.id;
};

let insert_tag = async (hashtag: string) => {
  const result = await client.query(
    /* sql */ `
    INSERT INTO tag (hashtag) VALUES ($1) RETURNING id
  `,
    [hashtag]
  );
  return result.rows[0].id;
};

let insert_post_tag = async (post_id: number, tag_id: number) => {
  await client.query(
    /* sql */ `
    INSERT INTO post_tag (post_id, tag_id) VALUES ($1, $2)
  `,
    [post_id, tag_id]
  );
};


eventRoutes.post("/createEvent", function (req: Request, res: Response) {
  form.parse(req, async (err, fields, files) => {
    try {
      let host_id = getSessionUser(req).id;
      let eventPictureMaybeArray = files.eventPictures;
      console.log("eventPictureMaybeArray:", files);
      let eventPicture = Array.isArray(eventPictureMaybeArray)
        ? eventPictureMaybeArray[0]
        : eventPictureMaybeArray.newFilename;
      let title = checkString("title", fields.title);
      let category = checkString("category", fields.category);
      let start_date = checkString("start_date", fields.start_date);
      let end_date = checkString("end_date", fields.end_date);
      let hashtag = checkString("hashtag", fields.hashtag);
      let cost = Number(checkString("cost", fields.cost));
      let location = checkString("location", fields.location);
      let participants = Number(
        checkString("participants", fields.participants)
      );
      console.log({ participants });

      let FAQ = checkString("FAQ", fields.FAQ);
      let is_age18 = checkBoolean("is_age18", fields.is_age18);
      let is_private = checkBoolean("is_private", fields.is_private);

      let result = await client.query(
        /* sql */ `
      select
        event.id
      from event
      inner join users on users.id = event.host_id
          `,
        []
      );


      let decodeTag = extractTag(hashtag);

      let tags = decodeTag;
      let { id: post_id } = await insert_post(req.body.content);

      for (let tag of tags) {
        let tag_id = await select_tag_id(tag);
        if (!tag_id) {
          tag_id = (await insert_tag(tag)).lastInsertRowid;
        }
        await insert_post_tag(post_id, tag_id);
      }


      result = await client.query(
        /* sql */ `
      insert into event
      (host_id, eventPicture, title, category, hashtag, start_date, end_date, cost, location, participants, FAQ, is_age18, is_private, decodeTag)
      values
      ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
      returning id
          `,
        [
          host_id,
          eventPicture,
          title,
          category,
          hashtag,
          start_date,
          end_date,
          cost,
          location,
          participants,
          FAQ,
          is_age18,
          is_private,
          decodeTag,
        ]
      );

      let id = result.rows[0].id;
      console.log(id);

      res.json(id);
    } catch (error) {
      console.log(error);
      res.json({});
    }
  });
});


eventRoutes.post("/joinEvent", async (req: Request, res: Response) => {
  try {
    let user_id = getSessionUser(req).id;
    let event_id = req.query.eventId;
    let result = await client.query(
      /* sql */ `
      select
      event_participant.id, event_participant.event_id
      from event_participant
      inner join users on users.id = event_participant.user_id
      inner join event on event.id = event_participant.event_id
          `,
      []
    );
    result = await client.query(
      /* sql */ `
      insert into event_participant
      (user_id, event_id)
      values
      ($1, $2)
      returning id
          `,
      [user_id, event_id]
    );

    let id = result.rows[0].id;
    if (user_id == undefined) {
      console.log("Please Login");
    }

    res.json(id);
  } catch (error) {
    console.log(error);
    res.json({});
  }
});


eventRoutes.use("/uploads/event-images", express.static(uploadDir));


eventRoutes.get("/viewEvent/:id", async (req, res, next) => {

  let id = req.params.id;
  try {
    let result = await client.query(
      /* sql */ `
    select * from event 
    left join event_participant on event_participant.event_id  = event.id
    WHERE event.id = $1
      `,
      [id]
    );

    res.json({ data: result.rows[0], joined: result.rowCount });
  } catch (error) {
    console.log(error);
    next(error);
  }
});


eventRoutes.get("/allParticipants/:id", async (req, res, next) => {
  let id = req.params.id;
  try {
    let result = await client.query(
      /* sql */ `
    select * from users
    right join event_participant on users.id  = event_participant.user_id 
    WHERE event_participant.event_id = $1
      `,
      [id]
    );
    let users = result.rows;
    res.json({ users });
  } catch (error) {
    next(error);
  }
});


eventRoutes.get("/eventParticipants/:id", async (req, res, next) => {
  let id = req.params.id;
  let user_id = getSessionUser(req).id;
  try {
    let result = await client.query(
      /* sql */ `
    select * from event_participant
    left join users on users.id  = event_participant.user_id 
    WHERE event_participant.event_id = $1
    AND event_participant.user_id = $2
      `,
      [id, user_id]
    );

    if (result.rows.length === 0) {
      res.json(result.rows[0]);
      console.log("You haven't joined this event.");
    }
    if (user_id == null) {
      console.log("You haven't login.");
    } else {
      console.log("You haven't joined this event.");
    }
  } catch (error) {
    next(error);
  }
});


eventRoutes.get("/allEvent/", async (req, res, next) => {
  try {
    let result = await client.query(
      /* sql */ `
    select id, eventPicture, title, is_private from event 
      `,
      []
    );
    let events = result.rows;
    res.json({ events });
  } catch (error) {
    next(error);
  }
});


我有以下錯誤：
HttpError: This API is only for authenticated users
    at getSessionUser (C:\Users\alany\vsprojects\project2\WSP-Project\guards.ts:17:9)
    at C:\Users\alany\vsprojects\project2\WSP-Project\routes\event.routes.ts:103:35
    at Generator.next (<anonymous>)
    at C:\Users\alany\vsprojects\project2\WSP-Project\routes\event.routes.ts:8:71
    at new Promise (<anonymous>)
    at __awaiter (C:\Users\alany\vsprojects\project2\WSP-Project\routes\event.routes.ts:4:12)
    at C:\Users\alany\vsprojects\project2\WSP-Project\routes\event.routes.ts:101:48
    at zalgoSafe (C:\Users\alany\vsprojects\project2\WSP-Project\node_modules\dezalgo\dezalgo.js:20:10)
    at f (C:\Users\alany\vsprojects\project2\WSP-Project\node_modules\once\once.js:25:25)
    at IncomingForm.<anonymous> (C:\Users\alany\vsprojects\project2\WSP-Project\node_modules\formidable\src\Formidable.js:183:9) {
  statusCode: 401
}
error: relation "event" does not exist
    at Parser.parseErrorMessage (C:\Users\alany\vsprojects\project2\WSP-Project\node_modules\pg-protocol\src\parser.ts:369:69)
    at Parser.handlePacket (C:\Users\alany\vsprojects\project2\WSP-Project\node_modules\pg-protocol\src\parser.ts:188:21)
    at Parser.parse (C:\Users\alany\vsprojects\project2\WSP-Project\node_modules\pg-protocol\src\parser.ts:103:30)
    at Socket.<anonymous> (C:\Users\alany\vsprojects\project2\WSP-Project\node_modules\pg-protocol\src\index.ts:7:48)
    at Socket.emit (node:events:513:28)
    at addChunk (node:internal/streams/readable:324:12)
    at readableAddChunk (node:internal/streams/readable:297:9)
    at Socket.Readable.push (node:internal/streams/readable:234:10)
    at TCP.onStreamRead (node:internal/stream_base_commons:190:23) {
  length: 104,
  severity: 'ERROR',
  code: '42P01',
  detail: undefined,
  hint: undefined,
  position: '20',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'parse_relation.c',
  line: '1395',
  routine: 'parserOpenTable'
}

如何修正﹖




後備：
//formidable，有上傳，有兩個cases，一個就object，多於一個就array，沒有就null。

eventRoutes.post("/createEvent", function (req: Request, res: Response) {
  form.parse(req, async (err, fields, files) => {
    try {
      let host_id = getSessionUser(req).id;
      let eventPictureMaybeArray = files.eventPictures;
      console.log("eventPictureMaybeArray:", files);
      let eventPicture = Array.isArray(eventPictureMaybeArray)
        ? eventPictureMaybeArray[0]
        : eventPictureMaybeArray.newFilename
        ? eventPictureMaybeArray.newFilename
        : "";
      let title = checkString("title", fields.title);
      let category = checkString("category", fields.category);
      let start_date = checkString("start_date", fields.start_date);
      let end_date = checkString("end_date", fields.end_date);
      let hashtag = checkString("hashtag", fields.hashtag);
      let cost = Number(checkString("cost", fields.cost));
      let location = checkString("location", fields.location);
      let participants = Number(
        checkString("participants", fields.participants)
      );
      console.log({ participants });

      let FAQ = checkString("FAQ", fields.FAQ);
      let is_age18 = checkBoolean("is_age18", fields.is_age18);
      let is_private = checkBoolean("is_private", fields.is_private);

      let result = await client.query(
        /* sql */ `
      select
        event.id
      from event
      inner join users on users.id = event.host_id
          `,
        []
      );

      //加入拆解hashtag。
      let decodeTag = extractTag(hashtag);
      //加入把decodeTag資料放入tag table
      let tags = decodeTag;
      let { id: post_id } = await insert_post(req.body.content);

      for (let tag of tags) {
        let tag_id = await select_tag_id(tag);
        if (!tag_id) {
          tag_id = (await insert_tag(tag)).lastInsertRowid;
        }
        await insert_post_tag(post_id, tag_id);
      }

      // 加入decodeTag及$14
      result = await client.query(
        /* sql */ `
      insert into event
      (host_id, eventPicture, title, category, hashtag, start_date, end_date, cost, location, participants, FAQ, is_age18, is_private, decodeTag)
      values
      ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
      returning id
          `,
        [
          host_id,
          eventPicture,
          title,
          category,
          hashtag,
          start_date,
          end_date,
          cost,
          location,
          participants,
          FAQ,
          is_age18,
          is_private,
          decodeTag,
        ]
      );

      let id = result.rows[0].id;
      console.log(id);

      res.json(id);
    } catch (error) {
      console.log(error);
      res.json({});
    }
  });
});

VS VS VS

entRoutes.post("/createEvent", function (req: Request, res: Response) {
  form.parse(req, async (err, fields, files) => {
    try {
      let host_id = getSessionUser(req).id;
      let eventPictureMaybeArray = files.eventPictures;
      console.log("eventPictureMaybeArray:", files);
      let eventPicture = Array.isArray(eventPictureMaybeArray)
        ? eventPictureMaybeArray[0]
        : eventPictureMaybeArray.newFilename;
      let title = checkString("title", fields.title);
      let category = checkString("category", fields.category);
      let start_date = checkString("start_date", fields.start_date);
      let end_date = checkString("end_date", fields.end_date);
      let hashtag = checkString("hashtag", fields.hashtag);
      let cost = Number(checkString("cost", fields.cost));
      let location = checkString("location", fields.location);
      let participants = Number(
        checkString("participants", fields.participants)
      );
      console.log({ participants });

/////////////
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="create-event" content="width=device-width, initial-scale=1.0" />
    <title>Create Event</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-aFq/bzH65dt+w6FI2ooMVUpc+21e0SRygnTpmBvdBgSdnuTN7QbdgL+OapgHtvPp"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <style>
      form {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 50px;
      }

      .line {
        width: 30rem;
      }
      
      textarea {
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
        border: none;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        height: 15rem;
      }

      .date {
        width: 15rem;
      }

      input {
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
        border: none;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
      }

      select {
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
        border: none;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
      }

      input[type="submit"] {
        background-color: #007bff;
        color: #fff;
        font-size: 20px;
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      input[type="submit"]:hover {
        background-color: #0069d9;
      }
    </style>
  </head>
  <body>
    <a href="/index.html"><i class="bi bi-x-lg"></i></a>
    <a href="/login.html"><div>
      <button id="logIn-btu">Login</button>
    </div></a>
    <form id="Create-Event">
      <H2>Event Create</H2>
      <div>
          <label for="img">Event Pictures:</label>
          <input action="/action_page.php" type="file" name="eventPictures" accept="image/*">
      </div>
      <div>
        <input class = "line" type="text"  placeholder="title" name="title"/>
      </div>
      <div>
        <select class = "line" type="text" placeholder="category" name="category" required>
          <option value="Anime">Anime</option>
          <option value="Board Game">Board Game</option>
          <option value="Booking">Booking</option>
          <option value="Celebrities">Celebrities</option>
          <option value="Giveaway">Giveaway</option>
          <option value="Match">Match</option>
          <option value="Meeting">Meeting</option>
          <option value="Photography">Photography</option>
        </select>
      </div>
      <div>
        <input class = "line" type="text" placeholder="hashtag" name="hashtag"/>
      </div>
      <div>
        <input class="start_date date" type="text" placeholder="Start Date" name ="start_date" onfocus="(this.type='date')" onblur="(this.type='text')">
        <input class="end_date date" type="text" placeholder="End Date" name ="end_date" onfocus="(this.type='date')" onblur="(this.type='text')" >
      </div>
      <div>
        <input class = "line" type="time" placeholder="timeslot" name="timeslot" required/>
      </div>
      <div>
        <input class = "line" type="number" placeholder="cost in HKD" name="cost" required/>
      </div>
      <div>
        <input class = "line" type="text" placeholder="location" name="location" required/>
      </div>
      <div>
        <input class = "line" type="number" placeholder="participants" name="participants" required/>
      </div>
      <div>
        <textarea class = "line" type="text" placeholder="FAQ" name="FAQ"></textarea>
      </div>
      <div>
        <input type="checkbox" name="is_age18" /> Is age 18 required?
        <input type="checkbox" name="is_private" /> Is it the private event?
      </div>
      <div>
        <input type="submit" id="submitForm" value="Create Event" />
      </div>
    </div> 
    </form>
    <script src="/js/alert.js"></script>
    <script>
      let today = new Date().toISOString().split('T')[0];
      console.log(today)
      document.querySelector(".start_date").setAttribute('min', today);

      document.querySelector(".start_date").addEventListener("change",()=>{

        let start_date = document.querySelector(".start_date").value
     
        document.querySelector(".end_date").setAttribute('min', start_date);

      } )
 
    document.querySelector("#Create-Event").addEventListener('submit', async (event)=> {
 
    event.preventDefault();
 

    // Serialize the Form afterwards
    const form = event.target;
    const formData = new FormData(form);


    // Submit FormData(), no need to add "Content-Type": "application/json"
    const res = await fetch("/createEvent", {
      method: "POST",
      body: formData,
    });

    const result = await res.json(); // { success: true }
    console.log(result)
    window.location = `/view-event.html?id=${result}`
    console.log("id:",result);
  });
      async function loadRole() {
        let res = await fetch('/role');
        let json = await res.json();
        if (!json.user) {
          document.body.dataset.role = 'guest';
          return;
        }
      }
      loadRole();
    </script>
  </body>
</html>


\\\\\\\\\\\\
<form id="Create-Event">
      <H2>Event Create</H2>
      <div>
          <label for="img">Event Pictures:</label>
          <input action="/action_page.php" type="file" name="eventPictures" accept="image/*">
      </div>
      <div>
        <input class = "line" type="text"  placeholder="title" name="title"/>
      </div>
      <div>
        <select class = "line" type="text" placeholder="category" name="category" required>
          <option value="Anime">Anime</option>
          <option value="Board Game">Board Game</option>
          <option value="Booking">Booking</option>
          <option value="Celebrities">Celebrities</option>
          <option value="Giveaway">Giveaway</option>
          <option value="Match">Match</option>
          <option value="Meeting">Meeting</option>
          <option value="Photography">Photography</option>
        </select>
      </div>
    
    <form id="createPostForm" method="post" action="/post">
      <label>
        <input hidden type="text" name="hashtags" />
        <div id="hashTagPreviewList">
          <div hidden class="hash-tag-preview">123</div>
        </div>
        <div>
          <input class = "line" type="text" placeholder="hashtag" name="hashtag" id="hashtag" list="hashtags"/>
          <datalist id="hashtags">
            <!-- <option>apple</option>
            <option>pie</option> -->
          </datalist>
        </div>        
      </label>
      <input type="submit" value="Submit" />
      <input type="reset" value="Reset" />
    </form>
    <form id="Create-Event">
      <div>
        <input class="start_date date" type="text" placeholder="Start Date" name ="start_date" onfocus="(this.type='date')" onblur="(this.type='text')">
        <input class="end_date date" type="text" placeholder="End Date" name ="end_date" onfocus="(this.type='date')" onblur="(this.type='text')" >
      </div>
      <div>
        <input class = "line" type="time" placeholder="timeslot" name="timeslot" required/>
      </div>
      <div>
        <input class = "line" type="number" placeholder="cost in HKD" name="cost" required/>
      </div>
      <div>
        <input class = "line" type="text" placeholder="location" name="location" required/>
      </div>
      <div>
        <input class = "line" type="number" placeholder="participants" name="participants" required/>
      </div>
      <div>
        <textarea class = "line" type="text" placeholder="FAQ" name="FAQ"></textarea>
      </div>
      <div>
        <input type="checkbox" name="is_age18" /> Is age 18 required?
        <input type="checkbox" name="is_private" /> Is it the private event?
      </div>
      <div>
        <input type="submit" id="submitForm" value="Create Event" />
      </div>
      </div> 
    </form>